
#!/usr/bin/env python3

import json
from time import sleep
import sys


class KeyStore:
    def __init__(self, key, value=None):
        self.key = key
        self.value = value

    def getKey(self):
        with open('./keys.json', 'r') as f:
            json_data = json.load(f)
        # print(json_data.keys())
        if self.key in json_data.keys():
            print(json_data[self.key])
        else:
            print("Key {} Not Found".format(self.key))

    def setKey(self):
        with open('./keys.json', 'r') as f:
            json_data = json.load(f)
        print(json_data.keys())
        if self.key in json_data.keys():
            print("Overwriting key {} with value: {} ".format(self.key, self.value))
            json_data[self.key] = self.value
        else:
            print("Creating new Key {} with value".format(self.key, self.value))
            json_data[self.key] = self.value
        print(json_data)
        with open('./keys.json', 'w') as f:
            json.dump(json_data, f)

    def watchKey(self):
        timer = 0
        with open('./keys.json', 'r') as f:
            json_data = json.load(f)
        if self.key in json_data.keys():
            while True:
                # print("Watching on key {} since {}sec".format(self.key, timer))
                current_value = json_data[self.key]

                with open('./keys.json', 'r') as f:
                    new_json_data = json.load(f)

                new_value = new_json_data[self.key]
                if self.key in new_json_data.keys():
                    if current_value == new_value:
                        pass
                    else:
                        print(new_value)
                        with open('./keys.json', 'w') as f:
                            json.dump(json_data, f)
                timer = timer+1
                sleep(1)
                    
                
        else:
            print("Key {} Not Found".format(self.key))
def help():
    print(''' 
    Usgae: 
    - keystore get <key> 
    - keystore set <key> <value>
    - keystore watch <key>
        ''')

if __name__ == '__main__':
    # ks = KeyStore("name", "3")
    if len(sys.argv) < 2:
        help()
    command_options = [ "get", "set", "watch" ]
    if sys.argv[1] in command_options:
        if sys.argv[1] == "get" and len(sys.argv) == 3:
            ks = KeyStore(sys.argv[2])
            ks.getKey()
        elif sys.argv[1] == "set" and len(sys.argv) == 4:
            ks = KeyStore(sys.argv[2], sys.argv[3])
            ks.setKey()
        elif sys.argv[1] == "watch" and len(sys.argv) == 3:
            ks = KeyStore(sys.argv[2])
            ks.watchKey()
        else:
            help()
    else:
        help()



            